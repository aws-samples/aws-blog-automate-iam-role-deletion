AWSTemplateFormatVersion: '2010-09-09'
Description: "Creates solution to check all roles' last used compliance"

Parameters:

  Frequency:
    Description: How often  (in days) the automation should run 
    Type: Number
    Default: 30
    MaxValue: 365

  NameOfSolution:
    Type: String
    Default: check-unused-IAM-role
    Description: The name of the solution - used for naming of created resources

  StateMachineHumanApprovalArn:
    Type: String
    Description: StepFunction state machine for approval workflow

  RolePatternAllowedlist:
    Description: Pipe separated whitelist of role pathnames using simple pathname matching
    Type: String
    Default: ''
    AllowedPattern: '[-a-zA-Z0-9+=,.@_/|*]+|^$'

  MaxDaysForLastUsed:
      Description: Checks the number of days allowed for a role to not be used before being non-compliant
      Type: Number
      Default: 60
      MaxValue: 365

  Scope:
    Description: Run this solution against an AWS account, an Organization or an Organizational Unit that you have delegated admin permission.
    Default: Organization
    Type: String
    AllowedValues: [Organization, OrganizationalUnit]
    ConstraintDescription: must choose between Organization, or OrganizationalUnit
    Description: Organization, or Organizational Unit 

  OUId: 
    Type: String
    Description: Organization Unit Id or Root ID 
    Default: ''

  OrgPaths: 
    Type: String
    Description: AWS Organizations path to the target OU/root (o-abcdefghij/ou-abcd-12345678/* or o-abcdefghij/r-1234/*)
    Default: ''

  CrossAccountRole: 
    Type: String
    Description: Role name for cross account role

  DefaultEmail:
    Type: String
    Description: Default email address of IT Security Team to notified unused IAM Role if Owner email isn't available from tag

Resources:

  SecurityCustomEventBus: 
    Type: AWS::Events::EventBus
    Properties: 
        Name: !Sub "${NameOfSolution}SecurityCustomEventBus"

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Periodically trigger Lambda function to start solution CheckUnusedIAMRole"
      ScheduleExpression: !Sub "rate(${Frequency} days)" #invoked every Frequency
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt LambdaGetAccounts.Arn
          Id: "GetMembersAccounts"

  PermissionInvokeLambdaGetAccount: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt LambdaGetAccounts.Arn 
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn

  LambdaGetAccounts:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: "Get list of accounts in Organization"
      FunctionName: !Sub '${NameOfSolution}-LambdaGetAccounts'
      Handler: get_member_accounts.lambda_handler
      MemorySize: 256
      Environment:
        Variables:
          SNS_topic: !Ref SNSTopic
          Scope: !Ref Scope
          OrganizationalUnitId: !Ref OUId
      Role: !GetAtt LambdaGetAccountsExecutionRole.Arn
      Runtime: python3.9
      Timeout: 600
      Code: ./lambda
    
  LambdaGetAccountsExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${NameOfSolution}-LambdaGetAccountsExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub '${NameOfSolution}-LambdaGetAccountsExecutionPolicy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - organizations:ListAccounts
            - organizations:ListAccountsForParent
            Resource: '*'
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${NameOfSolution}-CheckUnusedIAMRole" #avoiding circle dependencies in template
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${NameOfSolution}-LambdaGetAccounts:*'

  LambdaGetAccountsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${NameOfSolution}-LambdaGetAccounts'
      RetentionInDays: 7

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription: #need to change the the endpoint subscription
        - Endpoint: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${NameOfSolution}-LambdaCheckIAMRole'
          Protocol: lambda
      TopicName: !Sub "${NameOfSolution}-CheckUnusedIAMRole"

  PermissionInvokeLambdaCheckIAMRole: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt LambdaCheckIAMRole.Arn
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref SNSTopic

  LambdaCheckIAMRole: #main function checking IAM Roles
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: "Check for unused IAM roles in each account in organizations "
      FunctionName: !Sub "${NameOfSolution}-LambdaCheckIAMRole"
      Handler: check_iam_role.lambda_handler
      Environment:
        Variables:
          role_allowed_list: !Ref RolePatternAllowedlist
          default_email: !Ref DefaultEmail
          cross_account_role: !Ref CrossAccountRole
          max_days_for_last_used: !Ref MaxDaysForLastUsed
          state_machine_arn: !Ref StateMachineHumanApprovalArn
        
      MemorySize: 512
      Role: !GetAtt LambdaCheckIAMRoleExecutionRole.Arn
      Runtime: python3.9
      Timeout: 600
      Code: ./lambda      
    
  LambdaCheckIAMRoleExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${NameOfSolution}-LambdaCheckIAMRoleExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub '${NameOfSolution}-LambdaCheckIAMRoleExecutionPolicy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sts:assumeRole
            Resource: !Sub "arn:aws:iam::*:role/${CrossAccountRole}" 
            Condition: 
              ForAnyValue:StringLike:
                "aws:PrincipalOrgPaths": !Ref OrgPaths
          - Effect: Allow
            Action:
            - securityhub:BatchImportFindings
            - securityhub:BatchUpdateFindings 
            - securityhub:GetFindings
            Resource: 
              - !Sub 'arn:${AWS::Partition}:securityhub:${AWS::Region}:${AWS::AccountId}:hub/default'
              - !Sub 'arn:${AWS::Partition}:securityhub:${AWS::Region}:${AWS::AccountId}:product/*/default'
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource: !Ref StateMachineHumanApprovalArn
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${NameOfSolution}-LambdaCheckIAMRole:*'
  
  LambdaCheckIAMRoleLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${NameOfSolution}-LambdaCheckIAMRole"
      RetentionInDays: 7

Outputs:
  LambdaAssumeRole:
    Value: !GetAtt LambdaCheckIAMRoleExecutionRole.Arn